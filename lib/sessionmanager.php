<?php

namespace PHPMVC\LIB;

class SessionManager extends \SessionHandler
{

    private $sessionName = 'ARZAQSESSION';
    private $sessionMaxLifeTime = SESSION_LIFE_TIME;
    private $sessionSSL = false;
    private $sessionHTTPOnly = true;
    private $sessionPath = '/';
    private $sessionSavePath = SESSION_SAVE_PATH;
    private $sessionDomain = '.sawsan.com';

    private $ttl = 30 ; // time to leave .

    public function __construct()
    {
        ini_set('session.use_cookies', 1);
        ini_set('session.use_only_cookies', 1);
        ini_set('session.use_trans_sid', 0);
        ini_set('session.save_handler', 'files');
        ini_set('session.gc_maxlifetime', 3600);

        session_name($this->sessionName);
        session_set_cookie_params(
            $this->sessionMaxLifeTime,
            $this->sessionPath,
            $this->sessionDomain,
            $this->sessionSSL,
            $this->sessionHTTPOnly
        );
        session_save_path($this->sessionSavePath);

        /*
         * very important : so read, write 
         * can use them form my class not from SessionHandler
         * */
        session_set_save_handler($this, true);
    }
    public function read($id)
    {
        return base64_decode(parent::read($id));
    }
    public function write($id, $data)
    {
        return parent::write($id, base64_encode($data));
    }
    public function __get($key)
    {
        if (isset($_SESSION[$key]) && $key == 'u') {
            return $_SESSION[$key];
        }
        return isset($_SESSION[$key]) ? $_SESSION[$key] : false ;
    }
    public function __set($key, $value)
    {
        if ($key == 'u'){
            $_SESSION[$key] = $value;
        }else {
            $_SESSION[$key] = $value;
        }
    }
    public function __isset($key)
    {
        return isset($_SESSION[$key]) ? true : false ;
    }
    public function __unset($key)
    {
        unset($_SESSION[$key]);
    }
    public function start()
    {
        if('' === session_id()) {
            if(session_start()){
                $this->setSessionStartTime();
                $this->checkSessionValidity();
            }
        }

        $this->gc(3600 + 60);
    }
    private function setSessionStartTime(){
        if (!isset($this->sessionStartTime)){
            $this->sessionStartTime = time();
        }
        return true ;
    }
    private function checkSessionValidity(){
        if ((time() - $this->sessionStartTime) > (1 * 60)){
            $this->renewSession();
            $this->generateFingerPrint();
        }
    }
    private function renewSession(){
        $this->sessionStartTime = time();
        return session_regenerate_id(true);
    }
    public function kill()
    {
        session_unset();

        setcookie(
            $this->sessionName, '', time() - 1000,
            $this->sessionPath, $this->sessionDomain,
            $this->sessionSSL, $this->sessionHTTPOnly
        );

        session_destroy();
    }

    private function generateFingerPrint(){
        $userAgentId = $_SERVER['HTTP_USER_AGENT'];
        $this->cipherKey = random_bytes(32);
        $sessionId = session_id();
        $this->fingerPrint = md5($userAgentId . $this->cipherKey . $sessionId);
    }

    public function isValidFingerPrint(){
        if (!isset($this->fingerPrint)){
            $this->generateFingerPrint();
        }
        $fingerPrint = md5($_SERVER['HTTP_USER_AGENT'] . $this->cipherKey . session_id());

        if ($fingerPrint === $this->fingerPrint){
            return true ;
        }
        return false ;
    }

    public function gc($maxlifetime = SESSION_LIFE_TIME)
    {
        parent::gc($maxlifetime); // TODO: Change the autogenerated stub
    }

}
